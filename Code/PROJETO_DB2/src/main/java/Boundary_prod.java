
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import java.sql.*;
import br.com.projetoapoo.dal.ModuloConexao;
import javax.swing.*;
import java.awt.*;
import java.text.DateFormat;
import javax.swing.table.DefaultTableModel;

public class Boundary_prod extends javax.swing.JInternalFrame {

    public Produto prod;
    public Estoque estoq;
    public static Control_prod controlproduto = new Control_prod();
    private Integer codigo;

    Connection conexao = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    public static Boundary_prod gerProd;

    public void ShowTable() {
        String sql = "select prod_codigo, prod_nome, prod_descricao, prod_marca, prod_modelo, prod_preco, prod_fornecedor, prod_categoria from tbproduto";
        try {
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel) TabProduto.getModel();

            String codigo, nome, descricao, marca, modelo, preco, fornecedor, categoria;
            while (rs.next()) {
                codigo = rs.getString(1);
                nome = rs.getString(2);
                descricao = rs.getString(3);
                marca = rs.getString(4);
                modelo = rs.getString(5);
                preco = rs.getString(6);
                fornecedor = rs.getString(7);
                categoria = rs.getString(8);
                String[] row = {codigo, nome, descricao, marca, modelo, preco, fornecedor, categoria};
                model.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public Boundary_prod(Integer cod) {
        initComponents();
        conexao = ModuloConexao.conector();
        codigo = cod;
        ShowTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNome = new javax.swing.JLabel();
        btLimpar = new javax.swing.JButton();
        lblCodigo = new javax.swing.JLabel();
        lblDescricao = new javax.swing.JLabel();
        btCadastrar_prod = new javax.swing.JButton();
        btConsultar_prod = new javax.swing.JButton();
        lblMarca = new javax.swing.JLabel();
        btAlterar_prod = new javax.swing.JButton();
        ctMarca = new javax.swing.JTextField();
        btExcluir_prod = new javax.swing.JButton();
        lblPreco = new javax.swing.JLabel();
        ctNome = new javax.swing.JTextField();
        ctPreco = new javax.swing.JTextField();
        ctCodigo = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        TabProduto = new javax.swing.JTable();
        lblProduto = new javax.swing.JLabel();
        btSair = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ctDescricao = new javax.swing.JTextArea();
        lblModelo = new javax.swing.JLabel();
        ctModelo = new javax.swing.JTextField();
        lblCategoria = new javax.swing.JLabel();
        lblFornecedor = new javax.swing.JLabel();
        ctFornecedor = new javax.swing.JTextField();
        cmboxCateg = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Gerenciar Produto");
        setPreferredSize(new java.awt.Dimension(898, 609));

        lblNome.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNome.setText("*Nome:");

        btLimpar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btLimpar.setText("Limpar");
        btLimpar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        lblCodigo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCodigo.setText("*Código:");

        lblDescricao.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDescricao.setText("Descrição:");

        btCadastrar_prod.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btCadastrar_prod.setText("Cadastrar");
        btCadastrar_prod.setToolTipText("");
        btCadastrar_prod.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btCadastrar_prod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCadastrar_prodActionPerformed(evt);
            }
        });

        btConsultar_prod.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btConsultar_prod.setText("Consultar pelo codigo");
        btConsultar_prod.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btConsultar_prod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultar_prodActionPerformed(evt);
            }
        });

        lblMarca.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMarca.setText("*Marca:");

        btAlterar_prod.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btAlterar_prod.setText("Alterar");
        btAlterar_prod.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btAlterar_prod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterar_prodActionPerformed(evt);
            }
        });

        btExcluir_prod.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btExcluir_prod.setText("Excluir");
        btExcluir_prod.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btExcluir_prod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluir_prodActionPerformed(evt);
            }
        });

        lblPreco.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPreco.setText("*Preço:");

        ctNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctNomeActionPerformed(evt);
            }
        });

        ctPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctPrecoActionPerformed(evt);
            }
        });

        ctCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctCodigoActionPerformed(evt);
            }
        });

        TabProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "NOME", "DESCRICAO", "MARCA", "MODELO", "PRECO", "FORNECEDOR", "CATEGORIA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TabProduto.setFocusable(false);
        TabProduto.getTableHeader().setReorderingAllowed(false);
        TabProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabProdutoMouseClicked(evt);
            }
        });
        TabProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TabProdutoKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(TabProduto);

        lblProduto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProduto.setText("PRODUTO");

        btSair.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btSair.setText("Sair");
        btSair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        ctDescricao.setColumns(20);
        ctDescricao.setRows(5);
        jScrollPane1.setViewportView(ctDescricao);

        lblModelo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblModelo.setText("*Modelo:");

        ctModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctModeloActionPerformed(evt);
            }
        });

        lblCategoria.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCategoria.setText("*Categoria:");

        lblFornecedor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblFornecedor.setText("*Fornecedor:");

        ctFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctFornecedorActionPerformed(evt);
            }
        });

        cmboxCateg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HD", "SSD", "Memória RAM", "Memória Corsair", "Memória Adata", "Fonte", "Processador", "Placa mãe", "Periféricos", "Monitores" }));

        jLabel1.setText("*Campos Obrigatórios");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblProduto)
                        .addGap(247, 247, 247)
                        .addComponent(jLabel1)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btCadastrar_prod)
                                .addGap(134, 134, 134)
                                .addComponent(btConsultar_prod))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(424, 424, 424)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPreco)
                                    .addComponent(lblMarca)
                                    .addComponent(lblNome)
                                    .addComponent(lblModelo))
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ctNome, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(ctMarca, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ctPreco, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ctModelo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btLimpar)
                                    .addGap(18, 18, 18)
                                    .addComponent(btSair))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblCategoria)
                                                .addGap(18, 18, 18)
                                                .addComponent(cmboxCateg, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblDescricao)
                                                    .addComponent(lblCodigo))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(ctCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btAlterar_prod)
                                                .addGap(161, 161, 161)
                                                .addComponent(btExcluir_prod))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblFornecedor)
                                                .addGap(18, 18, 18)
                                                .addComponent(ctFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addGap(23, 23, 23))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProduto)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCodigo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ctNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblNome)
                        .addComponent(ctCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmboxCateg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCategoria)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDescricao)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ctMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ctModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPreco)
                            .addComponent(ctPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ctFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFornecedor))))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAlterar_prod)
                    .addComponent(btExcluir_prod)
                    .addComponent(btConsultar_prod)
                    .addComponent(btCadastrar_prod))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btLimpar)
                    .addComponent(btSair))
                .addGap(73, 73, 73))
        );

        setBounds(0, 0, 898, 577);
    }// </editor-fold>//GEN-END:initComponents

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        limpar();
    }//GEN-LAST:event_btLimparActionPerformed

    private void btCadastrar_prodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCadastrar_prodActionPerformed
        try {
            cadastrar();
            limpar();
        } catch (NumNegException ex) {
            Logger.getLogger(Boundary_ger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Boundary_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btCadastrar_prodActionPerformed

    private void btConsultar_prodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultar_prodActionPerformed
        try {
            consultar();
        } catch (NumNegException ex) {
            Logger.getLogger(Boundary_ger.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btConsultar_prodActionPerformed

    private void btAlterar_prodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterar_prodActionPerformed
        try {
            alterar();
            limpar();
        } catch (NumNegException ex) {
            Logger.getLogger(Boundary_ger.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btAlterar_prodActionPerformed

    private void btExcluir_prodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluir_prodActionPerformed
        try {
            excluir();
        } catch (SQLException ex) {
            Logger.getLogger(Boundary_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        limpar();
    }//GEN-LAST:event_btExcluir_prodActionPerformed

    private void ctNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ctNomeActionPerformed

    private void ctCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ctCodigoActionPerformed

    private void TabProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabProdutoMouseClicked
        if (TabProduto.getSelectedRow() != -1) {
            ctCodigo.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 0).toString());
            ctNome.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 1).toString());
            ctDescricao.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 2).toString());
            ctMarca.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 3).toString());
            ctModelo.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 4).toString());
            ctPreco.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 5).toString());
            ctFornecedor.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 6).toString());
            cmboxCateg.setSelectedItem(TabProduto.getValueAt(TabProduto.getSelectedRow(), 7).toString());
        }
    }//GEN-LAST:event_TabProdutoMouseClicked

    private void TabProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TabProdutoKeyReleased
        if (TabProduto.getSelectedRow() != -1) {
            ctCodigo.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 0).toString());
            ctNome.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 1).toString());
            ctDescricao.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 2).toString());
            ctMarca.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 3).toString());
            ctModelo.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 4).toString());
            ctPreco.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 5).toString());
            ctFornecedor.setText(TabProduto.getValueAt(TabProduto.getSelectedRow(), 6).toString());
            cmboxCateg.setSelectedItem(TabProduto.getValueAt(TabProduto.getSelectedRow(), 7).toString());
        }
    }//GEN-LAST:event_TabProdutoKeyReleased

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        sair();
    }//GEN-LAST:event_btSairActionPerformed

    private void ctPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctPrecoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ctPrecoActionPerformed

    private void ctModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctModeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ctModeloActionPerformed

    private void ctFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctFornecedorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ctFornecedorActionPerformed

    public void limpar() {
        ctNome.setText("");
        ctCodigo.setText("");
        ctDescricao.setText("");
        ctMarca.setText("");
        ctPreco.setText("");
        ctModelo.setText("");
        ctFornecedor.setText("");
        ctCodigo.requestFocus();
    }

    public void sair() {
        int resp = JOptionPane.showConfirmDialog(null, "Deseja sair?", "Saída", JOptionPane.YES_NO_CANCEL_OPTION);
        if (resp == 0) {
            this.dispose();
        }
    }

    public void excluir() throws SQLException {
        int x = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir o produto", "Confirmação de exclusão", JOptionPane.YES_NO_CANCEL_OPTION);
        if (x == 0) {
            String sql = "BEGIN;"
                    + "DELETE FROM tbproduto WHERE prod_codigo = ?;"
                    + "COMMIT;";
            try {
                pst = conexao.prepareStatement(sql);
                try {
                    if (Integer.parseInt(ctCodigo.getText()) > 0) {
                        pst.setInt(1, Integer.parseInt(ctCodigo.getText()));
                    } else {
                        JOptionPane.showMessageDialog(null, "O código deve ser um numero natural!", "ERRO de código", 0);
                    }
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "O código deve ser um numero natural!", "ERRO de código", 0);
                }
                int apagado = pst.executeUpdate();

                DefaultTableModel model = (DefaultTableModel) TabProduto.getModel();
                model.setRowCount(0);
                ShowTable();
                if (apagado > 0) {
                    JOptionPane.showMessageDialog(null, "Produto excluido com sucesso", "Exclusão do Produto", 1);
                    limpar();
                } else {
                    //JOptionPane.showMessageDialog(null, "Produto não excluído", "ERRO na exclusão", 0);

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
                pst = conexao.prepareStatement("BEGIN;"
                        + "DELETE FROM tbproduto WHERE prod_codigo = ?;"
                        + "ROLLBACK;");
            }
        }
    }

    public void alterar() throws NumNegException {
        String sql = "update viewrelatorioprod set prod_nome = ?, prod_descricao = ?, prod_preco = ?, prod_marca = ?, prod_categoria = ?, prod_modelo = ?, ger_codigo = ?, prod_fornecedor = ? where prod_codigo = ?";
        try {
            pst = conexao.prepareStatement(sql);
            pst.setString(1, ctNome.getText());
            pst.setString(2, ctDescricao.getText());
            try {
                if (Double.parseDouble(ctPreco.getText()) >= 0) {
                    pst.setDouble(3, Double.parseDouble(ctPreco.getText()));
                } else {
                    JOptionPane.showMessageDialog(null, "O preço deve ser um numero decimal positivo!", "ERRO de código", 0);
                }
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "O preço deve ser um numero decimal positivo!", "ERRO de código", 0);
            }
            pst.setString(4, ctMarca.getText());
            pst.setString(5, cmboxCateg.getSelectedItem().toString());
            pst.setString(6, ctModelo.getText());
            pst.setInt(7, codigo);
            pst.setString(8, ctFornecedor.getText());
            try {
                if (Integer.parseInt(ctCodigo.getText()) > 0) {
                    pst.setInt(9, Integer.parseInt(ctCodigo.getText()));
                } else {
                    JOptionPane.showMessageDialog(null, "O código deve ser um numero natural!", "ERRO de código", 0);
                }
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "O código deve ser um numero natural!", "ERRO de código", 0);
            }

            if (ctNome.getText().isEmpty() || ctMarca.getText().isEmpty() || ctModelo.getText().isEmpty() || ctFornecedor.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Preencha todos os campos obrigatórios!", "Campos Obrigatórios vazios", 0);
            } else {

                int add = pst.executeUpdate();

                if (add > 0) {
                    JOptionPane.showMessageDialog(null, "Produto atualizado com sucesso", "Atualização concluido", 1);
                    limpar();
                } else {
                    JOptionPane.showMessageDialog(null, "Produto não atualizado", "ERRO de atualização", 0);
                }

            }
            DefaultTableModel model = (DefaultTableModel) TabProduto.getModel();
            model.setRowCount(0);
            ShowTable();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void consultar() throws NumNegException {
        prod = new Produto();
        try {
            prod.setCodigo_prod(Integer.parseInt(ctCodigo.getText()));

            String sql = "select * from tbproduto where prod_codigo = ?";
            try {
                pst = conexao.prepareStatement(sql);
                pst.setInt(1, prod.getCodigo_prod());
                rs = pst.executeQuery();
                if (rs.next()) {
                    ctCodigo.setText(rs.getString(1));
                    ctNome.setText(rs.getString(2));
                    ctDescricao.setText(rs.getString(3));
                    ctPreco.setText(rs.getString(4));
                    ctMarca.setText(rs.getString(5));
                    cmboxCateg.setSelectedItem(rs.getString(6));
                    ctModelo.setText(rs.getString(7));
                    ctFornecedor.setText(rs.getString(10));

                    JOptionPane.showMessageDialog(null, "Confirme os dados do código", "Confirmacao de Dados", 1);
                } else {
                    JOptionPane.showMessageDialog(null, "Nao existe produto com este código", "Código inexistente", 0);
                    limpar();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "O código deve ser um numero natural!", "ERRO de código", 0);
            limpar();
        }
    }

    public void cadastrar() throws NumNegException, SQLException {
        prod = new Produto();

        try {
            if (Integer.parseInt(ctCodigo.getText()) > 0) {
                prod.setCodigo_prod(Integer.parseInt(ctCodigo.getText()));

                String mysql = "select * from tbproduto where prod_codigo = ?";
                try {
                    pst = conexao.prepareStatement(mysql);
                    pst.setInt(1, prod.getCodigo_prod());
                    rs = pst.executeQuery();
                    if (rs.next() != true) {
                        String sql = "BEGIN;"
                                + "insert into viewrelatorioprod(prod_codigo, prod_nome, prod_descricao, prod_preco, prod_marca, prod_categoria, prod_modelo, ger_codigo, prod_fornecedor)"
                                + "values(?, ?, ?, ?, ?, ?, ?, ?, ?); "
                                + "COMMIT;";

                        pst = conexao.prepareStatement(sql);
                        pst.setInt(1, Integer.parseInt(ctCodigo.getText()));
                        pst.setString(2, ctNome.getText());
                        pst.setString(3, ctDescricao.getText());
                        try {
                            if (Double.parseDouble(ctPreco.getText()) >= 0) {
                                pst.setDouble(4, Double.parseDouble(ctPreco.getText()));
                            } else {
                                JOptionPane.showMessageDialog(null, "O preço deve ser um numero decimal positivo!", "ERRO de código", 0);
                            }
                        } catch (NumberFormatException nfe) {
                            JOptionPane.showMessageDialog(null, "O preço deve ser um numero decimal positivo!", "ERRO de código", 0);
                        }
                        pst.setString(5, ctMarca.getText());
                        pst.setString(6, cmboxCateg.getSelectedItem().toString());
                        pst.setString(7, ctModelo.getText());
                        pst.setInt(8, codigo);
                        pst.setString(9, ctFornecedor.getText());

                        if (ctNome.getText().isEmpty() || ctMarca.getText().isEmpty() || ctModelo.getText().isEmpty() || ctFornecedor.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Preencha todos os campos obrigatórios!", "Campos Obrigatórios vazios", 0);
                        } else {

                            int add = pst.executeUpdate();

                            prod.setNome_prod(ctNome.getText());
                            prod.setDescricao_prod(ctDescricao.getText());
                            prod.setCodigo_prod(Integer.parseInt(ctCodigo.getText()));
                            prod.setPreco_prod(Double.parseDouble(ctPreco.getText()));
                            prod.setMarca_prod(ctMarca.getText());
                            prod.setModelo_prod(ctModelo.getText());
                            prod.setCategoria_prod(cmboxCateg.getSelectedItem().toString());
                            prod.setFornecedor_prod(ctFornecedor.getText());

                            prod = controlproduto.cad_prod(prod);

                            if (add > 0) {
                                addestoque();
                                JOptionPane.showMessageDialog(null, "Produto cadastrado com sucesso", "Cadastro concluido", 1);
                                limpar();
                            } else {
                                //JOptionPane.showMessageDialog(null, "Produto não cadastrado", "ERRO de cadastro", 0);
                            }

                        }

                        DefaultTableModel model = (DefaultTableModel) TabProduto.getModel();
                        model.setRowCount(0);
                        ShowTable();
                    } else {
                        JOptionPane.showMessageDialog(null, "Ja existe um produto com este código!", "ERRO de cadastro", 0);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                    pst = conexao.prepareStatement("BEGIN;"
                            + "insert into viewrelatorioprod(prod_codigo, prod_nome, prod_descricao, prod_preco, prod_marca, prod_categoria, prod_modelo, ger_codigo, prod_fornecedor)"
                            + "values(?, ?, ?, ?, ?, ?, ?, ?, ?); "
                            + "ROLLBACK;");
                }
            } else {
                JOptionPane.showMessageDialog(null, "O código deve ser um numero natural!", "ERRO de código", 0);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "O código deve ser um numero natural!", "ERRO de código", 0);
        }

    }

    public void addestoque() throws NumNegException, SQLException {
        estoq = new Estoque();

        String sql = "insert into tbestoque(prod_codigo, ger_codigo, est_quantidadeprod)"
                + "values(?, ?, ?)";

        pst = conexao.prepareStatement(sql);
        pst.setInt(1, Integer.parseInt(ctCodigo.getText()));
        pst.setInt(2, codigo);
        pst.setInt(3, 0);

        int add = pst.executeUpdate();

    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                int cod = 0;
                new Boundary_prod(cod).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabProduto;
    private javax.swing.JButton btAlterar_prod;
    private javax.swing.JButton btCadastrar_prod;
    private javax.swing.JButton btConsultar_prod;
    private javax.swing.JButton btExcluir_prod;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btSair;
    private javax.swing.JComboBox<String> cmboxCateg;
    private javax.swing.JTextField ctCodigo;
    private javax.swing.JTextArea ctDescricao;
    private javax.swing.JTextField ctFornecedor;
    private javax.swing.JTextField ctMarca;
    private javax.swing.JTextField ctModelo;
    private javax.swing.JTextField ctNome;
    private javax.swing.JTextField ctPreco;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblFornecedor;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblModelo;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblPreco;
    private javax.swing.JLabel lblProduto;
    // End of variables declaration//GEN-END:variables
}
